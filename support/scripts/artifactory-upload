#!/usr/bin/python3
# artifactory-upload: Helper tool for uploading artifacts to Artifactory.
#
# Copyright 2016 Raumfeld
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file LICENSE for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.


# This tool is roughly equivalent to the Maven deploy:deploy-file command:
#
# <https://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html>
#
# The main differences is that the generated POM file can contain custom
# properties. It does not seem possible to do that with Maven
# deploy:deploy-file -- you need to generate the POM yourself. Other than that
# the Maven deploy:deploy-file tool works fine.
#
# This tool wraps the Artifactory Go CLI tool. The Artifactory Go CLI cannot
# generate a POM, and is also unable to upload artifacts in the correct order.
# This triggers errors with SNAPSHOT versioning (new versions of the artifact
# overwrite the old version), and causes internal errors inside Artifactory due to
# database deadlocks.


import argparse
import glob
import os
import sys
import subprocess
import xml.etree.ElementTree as xml


class MavenPOMWriter(object):
    '''Write a Maven-compatible POM files that describes an artifact.'''

    namespace = 'http://maven.apache.org/POM/4.0.0'
    schema_url = 'http://maven.apache.org/xsd/maven-4.0.0.xsd'

    @classmethod
    def tag(cls, name):
        return xml.QName(cls.namespace, name)

    def add_child(self, parent, tag_name, text):
        element = xml.SubElement(parent, self.tag(tag_name))
        element.text = text

    def __init__(self, group_id, artifact_id, version, packaging=None, properties=None):
        xsi_schema_location = xml.QName(
            'http://www.w3.org/2001/XMLSchema-instance',
            'schemaLocation')

        project = xml.Element(
            self.tag('project'),
            attrib={
                xsi_schema_location: '%s %s' % (self.namespace, self.schema_url)
            }
        )

        self.add_child(project, 'modelVersion', '4.0.0')

        self.add_child(project, 'groupId', group_id)
        self.add_child(project, 'artifactId', artifact_id)
        self.add_child(project, 'version', version)
        if packaging:
            self.add_child(project, 'packaging', packaging)

        if properties:
            properties_element = xml.SubElement(
                project, self.tag('properties'))
            for key, value in properties.items():
                self.add_child(properties_element, key, str(value))

        self.project = project

    def write(self, stream):
        '''Write POM XML data to 'stream'.'''
        xml.register_namespace('xsi',  'http://www.w3.org/2001/XMLSchema-instance')

        pom = xml.ElementTree(element=self.project)

        pom.write(stream, default_namespace=self.namespace, method='xml')


class KeyValueAction(argparse.Action):
    '''Parses option strings that take key=value arguments.'''
    def __call__(self, parser, namespace, values, option_string=None):
        if '=' not in values:
            raise ValueError("Expected 'key=value' string for %s option" %
                            option_string)
        key, value = values.split('=', 1)
        store = getattr(namespace, self.dest) or {}
        store[key] = value
        setattr(namespace, self.dest, store)


def argument_parser():
    parser = argparse.ArgumentParser(
        description='Upload artifacts to a JFrog Artifactory server.')

    parser.add_argument('repo', type=str)
    parser.add_argument('group_id', type=str)
    parser.add_argument('artifact_id', type=str)
    parser.add_argument('version', type=str)
    parser.add_argument('upload_version', type=str)
    parser.add_argument('files', metavar='FILE', nargs='+', type=str)

    parser.add_argument('--artifactory-cli', metavar='PATH', type=str,
                        default='art',
                        help='Locate the `art` commandline tool, if it is '
                             'not in PATH')

    parser.add_argument('--no-autogenerated-pom', action='store_true',
                        help="Don't generate a .pom for the artifact when one "
                             "doesn't exist. Not recommended.")

    parser.add_argument('--property', metavar='PROPERTY=VALUE',
                        dest='properties', action=KeyValueAction,
                        help='Sets a property on the artifact.')

    parser.add_argument('--ignore-missing', action='store_true',
                        help="Exit with success if artifact files do not "
                             "exist.")

    return parser


def sanity_check(args):
    glob_list = args.files
    args.files = []
    for pattern in glob_list:
        # Due to CMake brokenness, we need to handle globbing ourselves when
        # called from CMake.
        filenames = glob.glob(pattern)
        args.files.extend(filenames)

    try:
        if len(args.files) == 0:
            raise RuntimeError("No files were found.")
        for filename in args.files:
            if not os.path.exists(filename):
                raise RuntimeError("File %s does not exist" % filename)
    except RuntimeError:
        if args.ignore_missing:
            # Exit with success if files are missing. This feature exists so
            # that the Artifactory.cmake module can call this unconditionally.
            # Testing if the files exist in CMake involves writing a more
            # complex CMake rule.
            sys.stderr.write("No artifacts found for %s.\n" % args.artifact_id)
            sys.exit(0)
        else:
            raise

    expected_basename = '%s-%s' % (args.artifact_id, args.upload_version)
    invalid_files = []
    for filename in args.files:
        basename = os.path.basename(filename)
        if not basename.startswith(expected_basename):
            invalid_files.append(filename)
    if invalid_files:
        raise RuntimeError(
            "Some files do not match the expected artifact name and "
            "version:\n  - %s" %
            '\n  - '.join(os.path.basename(f) for f in invalid_files))


def find_main_artifact_file(file_list, artifact_basename):
    for filename in file_list:
        file_basename = os.path.basename(filename)
        if file_basename.startswith(artifact_basename):
            if not file_basename.endswith('pom'):
                return filename
    raise RuntimeError(
        "Could not find the main artifact, given artifact basename %s."
        "List of files was %s" % (artifact_basename,
                                  [os.path.basename(f) for f in file_list]))


def upload(filename, remote_path, artifactory_cli='art', properties=None):
    '''Upload a single file to Artifactory using the artifactory-cli.'''

    props_arg = []
    if properties:
        props = ('%s=%s' % (key, value) for key, value in properties.items())
        props_arg = ['--props=%s' % ';'.join(props)]

    command = [artifactory_cli, 'rt', 'upload', os.path.basename(filename),
               remote_path] + props_arg
    print ' '.join(command)
    subprocess.check_call(command, cwd=os.path.dirname(filename))


def main():
    args = argument_parser().parse_args()

    sanity_check(args)

    # The important thing is to ensure that first the main artifact is
    # uploaded, then the POM, then the supplementary artifacts.
    #
    # First, this avoids issues with -SNAPSHOT versions. See:
    #  <https://stackoverflow.com/questions/9819965/artifactory-snapshot-filename-handling/9908168#9908168>
    #
    # Second, this avoids random 500 errors from Artifactory. If you upload
    # an artifact using the `art` tool itself, and there are several files
    # including a POM, you will see random errors like this:
    #
    #   [Thread 0] Artifactory response: 500 Internal Server Error
    #   [Thread 2] Artifactory response: 500 Internal Server Error
    #   [Thread 1] Artifactory response: 201 Created
    #
    # Server side if you enable debug logging you will see:
    #
    #   Caused by: org.apache.derby.iapi.error.StandardException: A lock could not be obtained due to a deadlock
    #
    # If you upload artifacts with Maven, this error never occurs, presumably
    # because Maven uploads in the expected order: main artifact, POM,
    # supplement artifacts.
    #
    # This approach is slower than uploading everything in one go, but it
    # does actually work, which is a big advantage.

    artifact_basename = '%s-%s.' % (args.artifact_id, args.upload_version)
    main_file = find_main_artifact_file(args.files, artifact_basename)
    extension = os.path.basename(main_file)[len(artifact_basename):]
    pom_file = main_file[:-len(extension)] + 'pom'

    group_path = args.group_id.replace('.', '/')
    remote_path = '%s/%s/%s/%s/' % (
        args.repo, group_path, args.artifact_id, args.upload_version)

    upload(main_file, remote_path, artifactory_cli=args.artifactory_cli,
           properties=args.properties)

    if os.path.exists(pom_file):
        upload(pom_file, remote_path, artifactory_cli=args.artifactory_cli,
            properties=args.properties)
    else:
        if args.no_autogenerated_pom:
            # This is a bad idea, it will mess up your -SNAPSHOT versioning.
            pass
        else:
            # We set the properties in the Maven POM file, but this doesn't
            # actually have any benefit. If you upload the artifact with that
            # POM to Artifactory using `maven deploy:deploy-file` all the
            # properties will not be set at the remote end.
            pom = MavenPOMWriter(
                args.group_id, args.artifact_id, args.version, extension,
                properties=args.properties)
            with open(pom_file, 'w') as f:
                pom.write(f)
            upload(pom_file, remote_path, artifactory_cli=args.artifactory_cli,
                properties=args.properties)

    for filename in args.files:
        if filename not in [main_file, pom_file]:
            upload(filename, remote_path, artifactory_cli=args.artifactory_cli,
                   properties=args.properties)


try:
    main()
except RuntimeError as e:
    sys.stderr.write('ERROR: %s\n' % e)
    sys.exit(1)
